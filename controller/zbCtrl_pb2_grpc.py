# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import zbCtrl_pb2 as zbCtrl__pb2


class ZBCtrlStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetState = channel.unary_unary(
                '/zbCtrl.ZBCtrl/GetState',
                request_serializer=zbCtrl__pb2.GetStateRequest.SerializeToString,
                response_deserializer=zbCtrl__pb2.GetStateResponse.FromString,
                )
        self.SetState = channel.unary_unary(
                '/zbCtrl.ZBCtrl/SetState',
                request_serializer=zbCtrl__pb2.SetStateRequest.SerializeToString,
                response_deserializer=zbCtrl__pb2.SetStateResponse.FromString,
                )


class ZBCtrlServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ZBCtrlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetState,
                    request_deserializer=zbCtrl__pb2.GetStateRequest.FromString,
                    response_serializer=zbCtrl__pb2.GetStateResponse.SerializeToString,
            ),
            'SetState': grpc.unary_unary_rpc_method_handler(
                    servicer.SetState,
                    request_deserializer=zbCtrl__pb2.SetStateRequest.FromString,
                    response_serializer=zbCtrl__pb2.SetStateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'zbCtrl.ZBCtrl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ZBCtrl(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zbCtrl.ZBCtrl/GetState',
            zbCtrl__pb2.GetStateRequest.SerializeToString,
            zbCtrl__pb2.GetStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zbCtrl.ZBCtrl/SetState',
            zbCtrl__pb2.SetStateRequest.SerializeToString,
            zbCtrl__pb2.SetStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
