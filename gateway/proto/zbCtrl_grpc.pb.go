// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: proto/zbCtrl.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ZBCtrl_GetState_FullMethodName = "/zbCtrl.ZBCtrl/GetState"
	ZBCtrl_SetState_FullMethodName = "/zbCtrl.ZBCtrl/SetState"
)

// ZBCtrlClient is the client API for ZBCtrl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZBCtrlClient interface {
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error)
}

type zBCtrlClient struct {
	cc grpc.ClientConnInterface
}

func NewZBCtrlClient(cc grpc.ClientConnInterface) ZBCtrlClient {
	return &zBCtrlClient{cc}
}

func (c *zBCtrlClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, ZBCtrl_GetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBCtrlClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error) {
	out := new(SetStateResponse)
	err := c.cc.Invoke(ctx, ZBCtrl_SetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZBCtrlServer is the server API for ZBCtrl service.
// All implementations must embed UnimplementedZBCtrlServer
// for forward compatibility
type ZBCtrlServer interface {
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	SetState(context.Context, *SetStateRequest) (*SetStateResponse, error)
	mustEmbedUnimplementedZBCtrlServer()
}

// UnimplementedZBCtrlServer must be embedded to have forward compatible implementations.
type UnimplementedZBCtrlServer struct {
}

func (UnimplementedZBCtrlServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedZBCtrlServer) SetState(context.Context, *SetStateRequest) (*SetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedZBCtrlServer) mustEmbedUnimplementedZBCtrlServer() {}

// UnsafeZBCtrlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZBCtrlServer will
// result in compilation errors.
type UnsafeZBCtrlServer interface {
	mustEmbedUnimplementedZBCtrlServer()
}

func RegisterZBCtrlServer(s grpc.ServiceRegistrar, srv ZBCtrlServer) {
	s.RegisterService(&ZBCtrl_ServiceDesc, srv)
}

func _ZBCtrl_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBCtrlServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBCtrl_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBCtrlServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBCtrl_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBCtrlServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBCtrl_SetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBCtrlServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZBCtrl_ServiceDesc is the grpc.ServiceDesc for ZBCtrl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZBCtrl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zbCtrl.ZBCtrl",
	HandlerType: (*ZBCtrlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _ZBCtrl_GetState_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _ZBCtrl_SetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/zbCtrl.proto",
}
